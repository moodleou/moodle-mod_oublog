{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main js on mod_oublog plugin.\n *\n * @module      mod_oublog/main\n * @copyright   2024 The Open University\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getString, getStrings} from 'core/str';\nimport DeleteModal from 'mod_oublog/modal';\nimport * as ModalEvents from 'core/modal_events';\nimport * as FocusLock from 'core/local/aria/focuslock';\nimport Pending from 'core/pending';\n\n/**\n * Hides or shows the warning marker based on the value of the comment selection.\n */\nconst hideWarning = () => {\n    const pendingPromise = new Pending('mod/oublog:hideWarning');\n    const field = document.querySelector('#publicwarningmarker');\n    const select = document.querySelector('#id_allowcomments');\n    if (field && select) {\n        const parent = field.parentNode.parentNode;\n        // We need to use !important to override the core CSS.\n        parent.style.setProperty('display', select.value == 2 ? 'block' : 'none', 'important');\n    }\n    pendingPromise.resolve();\n};\n\n/**\n * Initializes the OUBlog module, setting up the comment change listener.\n */\nconst init = () => {\n    hideWarning();\n    const comments = document.querySelector('#id_allowcomments');\n    if (comments) {\n        comments.addEventListener('change', hideWarning);\n    }\n};\n\n/**\n * Initializes the show/hide functionality for a specific stats view block.\n *\n * @param {string} name - The name of the block to initialize\n * @param {number} curPref - The current preference (1 = hidden, 0 = visible)\n */\nconst initShowHide = (name, curPref) => {\n    const block = document.querySelector(`.oublog_statsview_content_${name}`);\n    if (block) {\n        const showHide = block.querySelector('.block_action_oublog');\n        const form = block.querySelector('form.mform');\n        if (showHide && form) {\n            const hideInfo = block.querySelector('.oublog_stats_minus');\n            const showInfo = block.querySelector('.oublog_stats_plus');\n\n            // Set initial state based on curpref.\n            if (curPref === 1) {\n                form.classList.add('oublog_displaynone');\n                hideInfo.classList.add('oublog_displaynone');\n                showInfo.classList.remove('oublog_displaynone');\n            }\n\n            const elements = { hideInfo, showInfo, form };\n\n            showHide.addEventListener('click', (e) => {\n                curPref = toggleVisibility(e, elements, curPref, name);\n            });\n\n            showHide.addEventListener('keypress', (e) => {\n                if (e.key === 'Enter') {\n                    curPref = toggleVisibility(e, elements, curPref, name);\n                }\n            });\n        }\n    }\n};\n\n\n/**\n * Toggles the visibility of stats view elements.\n *\n * @param {Event} e - The event triggering the toggle\n * @param {Object} elements - The elements involved in the toggle\n * @param {number} curPref - The current preference (1 = hidden, 0 = visible)\n * @param {string} name - The name of the block (used for setting preferences)\n * @returns {number} - The updated preference\n */\nconst toggleVisibility = (e, elements, curPref, name) => {\n    const pendingPromise = new Pending('mod/oublog:toggleVisibility');\n    e.preventDefault();\n    const { hideInfo, showInfo, form } = elements;\n\n    if (curPref === 1) {\n        hideInfo.classList.remove('oublog_displaynone');\n        showInfo.classList.add('oublog_displaynone');\n        form.classList.remove('oublog_displaynone');\n        curPref = 0;\n    } else {\n        hideInfo.classList.add('oublog_displaynone');\n        showInfo.classList.remove('oublog_displaynone');\n        form.classList.add('oublog_displaynone');\n        curPref = 1;\n    }\n\n    // Update user preference if logged in.\n    if (!document.body.classList.contains('notloggedin')) {\n        require(['core_user/repository'], (userRepository) => {\n            userRepository.setUserPreference(`mod_oublog_hidestatsform_${name}`, curPref);\n        });\n    }\n    pendingPromise.resolve();\n    return curPref;\n};\n\n/**\n * Initializes the delete and email confirmation dialog for posts.\n *\n * @param {number} cmId - The course module ID\n * @param {number} postId - The ID of the post to handle\n */\nconst initDeleteAndEmail = (cmId, postId) => {\n    const deleteBtn = document.querySelector(`a.oublog_deleteandemail_${postId}`);\n    if (deleteBtn) {\n        deleteBtn.addEventListener('click', async (e) => {\n            e.preventDefault();\n            const pendingPromise = new Pending('core/notification:confirm');\n            let uri = deleteBtn.href;\n            const content = await getString('deleteemailpostdescription', 'oublog');\n            const modal = await DeleteModal.create({\n                templateContext: {content: content},\n            });\n            const $root = await modal.getRoot();\n            FocusLock.trapFocus(document.querySelector('.modal-dialog.oublog-delete-modal'));\n\n            $root.on(ModalEvents.hidden, function () {\n                modal.destroy();\n                FocusLock.untrapFocus();\n            });\n\n            // Handle delete and deleteandmail event.\n            $root.on(ModalEvents.delete, (e) => {\n                e.preventDefault();\n                uri += '&confirm=1';\n                document.location.href = uri;\n            });\n            $root[0].addEventListener('click', (e) => {\n                const deleteAndMail = e.target.closest('[data-action=\"deleteandmail\"]');\n                if (deleteAndMail) {\n                    e.preventDefault();\n                    // Add on the 'email' marker to the link uri.\n                    uri += '&email=1';\n                    document.location.href = uri;\n                    modal.hide();\n                    modal.destroy();\n                }\n            });\n            pendingPromise.resolve();\n        });\n    }\n};\n\n/**\n * Updates the preselected value for the given checkbox.\n *\n * @param {HTMLInputElement} check - The checkbox element\n * @param {HTMLInputElement} preSelectInput - The input element storing the preselected values\n */\nconst updatePreselect = (check, preSelectInput) => {\n    const pendingPromise = new Pending('mod/oublog:updatePreselect');\n    let preSelect = preSelectInput.value;\n    const id = check.name.substring(5);\n\n    if (check.checked) {\n        // Add id to preselect value.\n        if (id) {\n            const preArray = preSelect ? preSelect.split(',') : [];\n            if (!preArray.includes(id)) {\n                preArray.push(id);\n                preSelectInput.value = preArray.join(',');\n                updateLinks(preArray);\n            }\n        }\n    } else {\n        // De-selecting, remove from preselect.\n        if (preSelect && id) {\n            const preArray = preSelect.split(',');\n            const index = preArray.indexOf(id);\n            if (index !== -1) {\n                preArray.splice(index, 1);\n                preSelectInput.value = preArray.join(',');\n                updateLinks(preArray);\n            }\n        }\n    }\n    pendingPromise.resolve();\n};\n\n/**\n * Updates the links in the table with the latest \"preselected\" query parameter.\n * Adds or modifies the `preselected` parameter in each link's query string.\n *\n * @param {Array} preArray - The array of preselected IDs\n */\nconst updateLinks = (preArray) => {\n    const pendingPromise = new Pending('mod/oublog:updateLinks');\n    const links = document.querySelectorAll('.oublog_import_step1 form .paging a, .flexible a');\n    links.forEach((link) => {\n        const url = new URL(link.href);\n        url.searchParams.set('preselected', preArray.join(','));\n        link.href = url.toString();\n    });\n    pendingPromise.resolve();\n};\n\n/**\n * Initializes the post table with select-all and select-none functionality.\n */\nconst initPostTable = async () => {\n    const includeHead = document.querySelector('.flexible .header.c3');\n    const postChecks = document.querySelectorAll('.flexible td.c3 input[type=\"checkbox\"]');\n    const preSelectInput = document.querySelector('form input[name=preselected]');\n\n    if (includeHead && postChecks) {\n        const [\n            selectAll,\n            none,\n        ] = await getStrings([\n            'import_step1_all',\n            'import_step1_none',\n        ].map((key) => ({key, 'component': 'oublog'})));\n        includeHead.innerHTML += `\n            <a href=\"#\" class=\"oublog_import_all\">${selectAll}</a> /\n            <a href=\"#\" class=\"oublog_import_none\">${none}</a>\n        `;\n\n        document.querySelector('.flexible .c3 .oublog_import_all').addEventListener('click', (e) => {\n            e.preventDefault();\n            postChecks.forEach((check) => {\n                check.checked = true;\n                updatePreselect(check, preSelectInput);\n            });\n        });\n\n        document.querySelector('.flexible .c3 .oublog_import_none').addEventListener('click', (e) => {\n            e.preventDefault();\n            postChecks.forEach((check) => {\n                check.checked = false;\n                updatePreselect(check, preSelectInput);\n            });\n        });\n    }\n\n    if (postChecks && preSelectInput) {\n        postChecks.forEach((check) => {\n            check.addEventListener('click', () => {\n                updatePreselect(check, preSelectInput);\n            });\n        });\n    }\n};\n\nexport { init, initShowHide, initDeleteAndEmail, initPostTable };\n"],"names":["hideWarning","pendingPromise","Pending","field","document","querySelector","select","parentNode","style","setProperty","value","resolve","comments","addEventListener","name","curPref","block","showHide","form","hideInfo","showInfo","classList","add","remove","elements","e","toggleVisibility","key","preventDefault","body","contains","require","userRepository","setUserPreference","cmId","postId","deleteBtn","async","uri","href","content","modal","DeleteModal","create","templateContext","$root","getRoot","FocusLock","trapFocus","on","ModalEvents","hidden","destroy","untrapFocus","delete","location","target","closest","hide","updatePreselect","check","preSelectInput","preSelect","id","substring","checked","preArray","split","includes","push","join","updateLinks","index","indexOf","splice","querySelectorAll","forEach","link","url","URL","searchParams","set","toString","includeHead","postChecks","selectAll","none","map","innerHTML"],"mappings":"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"}