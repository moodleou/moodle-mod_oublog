{"version":3,"file":"savecheck.min.js","sources":["../src/savecheck.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS for save check on mod_oublog plugin.\n *\n * @module      mod_oublog/savecheck\n * @copyright   2024 The Open University\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getString} from 'core/str';\nimport Notification from 'core/notification';\nimport Config from 'core/config';\nimport Pending from 'core/pending';\nimport * as FormChangeChecker from 'core_form/changechecker';\n\nclass SaveCheck {\n    /**\n     * Constructor to initialize SaveCheck with the given context ID.\n     *\n     * @param {number} contextId - The context ID used for server validation\n     */\n    constructor(contextId) {\n        this.contextId = contextId;\n        this.init();\n    }\n\n    /**\n     * Initialize event listeners for save buttons.\n     */\n    init = () => {\n        const btns = document.querySelectorAll('#id_submitbutton');\n        btns.forEach((btn) => {\n            btn.addEventListener('click', (e) => {\n                this.handleButtonClick(e, btns);\n            });\n        });\n    };\n\n    /**\n     * Handle the click event of save buttons.\n     *\n     * @param {Event} e - The click event\n     * @param {NodeList} btns - The list of save buttons\n     */\n    handleButtonClick = (e, btns) => {\n        e.preventDefault();\n        const pendingPromise = new Pending('mod/oublog:savecheck');\n        this.sendCheckRequest(\n            (response) => {\n                this.checkSave(response, e, btns);\n                pendingPromise.resolve();\n            },\n            (error) =>  {\n                this.checkFailure(error, btns);\n                pendingPromise.resolve();\n            }\n        );\n\n    };\n\n    /**\n     * Handle save failure scenario by displaying an alert and disabling buttons.\n     *\n     * @param {string} stringName - The name of the failure string\n     * @param {string} info - Additional info for the alert\n     * @param {NodeList} btns - The list of save buttons\n     */\n    saveFail = async (stringName, info, btns) => {\n        let content = await getString('savefailtext', 'oublog', await getString(stringName, 'oublog'));\n        if (info) {\n            content += `[${info}]`;\n        }\n\n        btns.forEach(btn => {\n            btn.disabled = true;\n        });\n\n        Notification.alert(await getString('savefailtitle', 'oublog'), content);\n        const cancel = document.querySelector('#id_cancel');\n        if (cancel) {\n            cancel.addEventListener('click', () => {\n                const form = document.querySelector('#region-main .mform');\n                if (form) {\n                    const text = form.querySelector('#fitem_id_message');\n                    const attach = form.querySelector('#fitem_id_attachments');\n                    if (text) {\n                        text.remove();\n                    }\n                    if (attach) {\n                        attach.remove();\n                    }\n                    form.method = 'get';\n                }\n            });\n        }\n    };\n\n    /**\n     * Check the save response for success and handle failure if necessary.\n     *\n     * @param {XMLHttpRequest} response - The XMLHttpRequest response\n     * @param {Event} e - The click event\n     * @param {NodeList} btns - The list of save buttons\n     */\n    checkSave = (response, e, btns) => {\n        if (response.responseText.search('ok') === -1) {\n            // Send save failed due to login/session error.\n            this.saveFail('savefailsession', response.responseText, btns);\n        } else {\n            // If the response is OK, allow form submission.\n            const form = e.target.closest('form');\n            if (form) {\n                // Manually trigger the form submission.\n                // For the first submission, this form will be marked as \"submitted.\"\n                // Therefore, when calling submit again,\n                // we need to invoke this function to prevent the form from being detected as dirty.\n                FormChangeChecker.disableAllChecks();\n                form.submit();\n            }\n        }\n    };\n\n    /**\n     * Handle network or timeout failures for save request.\n     *\n     * @param {Error} error - The error object\n     * @param {NodeList} btns - The list of save buttons\n     */\n    checkFailure = (error, btns) => {\n        this.saveFail('savefailnetwork', error.statusText, btns);\n    };\n\n    /**\n     * Send an XMLHttpRequest to verify session status.\n     *\n     * @param {Function} onSuccess - Callback function on successful response\n     * @param {Function} onFailure - Callback function on error/timeout\n     */\n    sendCheckRequest = (onSuccess, onFailure) => {\n        const xhr = new XMLHttpRequest();\n        const params = `sesskey=${Config.sesskey}&contextid=${this.contextId}`;\n        xhr.open('POST', 'confirmloggedin.php', true);\n        xhr.timeout = 30000;\n\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === XMLHttpRequest.DONE) {\n                if (xhr.status === 200) {\n                    onSuccess(xhr);\n                } else {\n                    onFailure(xhr);\n                }\n            }\n        };\n\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        xhr.send(params);\n    };\n}\n\n/**\n * Initializes an SaveCheck instance for a given input element.\n *\n * @param {Number} contextId - The context id\n * @returns {SaveCheck} - An instance of the SaveCheck class initialized with the given input element and data\n */\nexport const init = (contextId) => {\n    return new SaveCheck(contextId);\n};\n"],"names":["SaveCheck","constructor","contextId","btns","document","querySelectorAll","forEach","btn","addEventListener","e","handleButtonClick","preventDefault","pendingPromise","Pending","sendCheckRequest","response","checkSave","resolve","error","checkFailure","async","stringName","info","content","disabled","alert","cancel","querySelector","form","text","attach","remove","method","responseText","search","saveFail","target","closest","FormChangeChecker","disableAllChecks","submit","statusText","onSuccess","onFailure","xhr","XMLHttpRequest","params","Config","sesskey","this","open","timeout","onreadystatechange","readyState","DONE","status","setRequestHeader","send","init"],"mappings":"8lDA6BMA,UAMFC,YAAYC,wCAQL,WACGC,KAAOC,SAASC,iBAAiB,oBACvCF,KAAKG,SAASC,MACVA,IAAIC,iBAAiB,SAAUC,SACtBC,kBAAkBD,EAAGN,yDAWlB,CAACM,EAAGN,QACpBM,EAAEE,uBACIC,eAAiB,IAAIC,iBAAQ,6BAC9BC,kBACAC,gBACQC,UAAUD,SAAUN,EAAGN,MAC5BS,eAAeK,aAElBC,aACQC,aAAaD,MAAOf,MACzBS,eAAeK,iDAahBG,MAAOC,WAAYC,KAAMnB,YAC5BoB,cAAgB,kBAAU,eAAgB,eAAgB,kBAAUF,WAAY,WAChFC,OACAC,oBAAeD,WAGnBnB,KAAKG,SAAQC,MACTA,IAAIiB,UAAW,2BAGNC,YAAY,kBAAU,gBAAiB,UAAWF,eACzDG,OAAStB,SAASuB,cAAc,cAClCD,QACAA,OAAOlB,iBAAiB,SAAS,WACvBoB,KAAOxB,SAASuB,cAAc,0BAChCC,KAAM,OACAC,KAAOD,KAAKD,cAAc,qBAC1BG,OAASF,KAAKD,cAAc,yBAC9BE,MACAA,KAAKE,SAELD,QACAA,OAAOC,SAEXH,KAAKI,OAAS,+CAalB,CAACjB,SAAUN,EAAGN,YACsB,IAAxCY,SAASkB,aAAaC,OAAO,WAExBC,SAAS,kBAAmBpB,SAASkB,aAAc9B,UACrD,OAEGyB,KAAOnB,EAAE2B,OAAOC,QAAQ,QAC1BT,OAKAU,kBAAkBC,mBAClBX,KAAKY,mDAWF,CAACtB,MAAOf,aACdgC,SAAS,kBAAmBjB,MAAMuB,WAAYtC,kDASpC,CAACuC,UAAWC,mBACrBC,IAAM,IAAIC,eACVC,yBAAoBC,gBAAOC,8BAAqBC,KAAK/C,WAC3D0C,IAAIM,KAAK,OAAQ,uBAAuB,GACxCN,IAAIO,QAAU,IAEdP,IAAIQ,mBAAqB,KACjBR,IAAIS,aAAeR,eAAeS,OACf,MAAfV,IAAIW,OACJb,UAAUE,KAEVD,UAAUC,OAKtBA,IAAIY,iBAAiB,eAAgB,qCACrCZ,IAAIa,KAAKX,gBArIJ5C,UAAYA,eACZwD,sBA8IQxD,WACV,IAAIF,UAAUE"}