{"version":3,"file":"tagselector.min.js","sources":["../src/tagselector.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS for tag selector on mod_oublog plugin.\n *\n * @module      mod_oublog/tagselector\n * @copyright   2024 The Open University\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getString} from 'core/str';\n\nclass TagSelector {\n    /**\n     * Initializes the TagSelector instance.\n     *\n     * @param {string} inputId - The ID of the input element\n     * @param {Array} data - The data array of objects to be used in autocomplete\n     */\n    constructor(inputId, data) {\n        this.input = document.getElementById(inputId);\n        this.data = data;\n        this.filteredData = [...data];\n\n        this.dropdownWrapper = this.createDropdownWrapper();\n        this.dropdown = this.createDropdown();\n        this.setAttributes(this.input, {\n            'aria-owns': this.dropdown.id,\n            'aria-expanded': 'false',\n            'aria-autocomplete': 'list',\n            'role': 'combobox',\n        });\n        this.activeIndex = -1;\n\n        this.attachInputEvents();\n    }\n\n    /**\n     * Creates the dropdown wrapper element.\n     *\n     * @returns {HTMLElement} - The created dropdown wrapper element\n     */\n    createDropdownWrapper = () => {\n        const wrapper = document.createElement('div');\n        wrapper.className = 'autocomplete-dropdown-wrapper';\n        document.body.appendChild(wrapper);\n        return wrapper;\n    };\n\n    /**\n     * Creates the dropdown element.\n     *\n     * @returns {HTMLElement} - The created dropdown element\n     */\n    createDropdown = () => {\n        const dropdown = document.createElement('ul');\n        dropdown.className = 'autocomplete-dropdown';\n        this.setAttributes(dropdown, {\n            'id':  this.input.id + '_results',\n            'role': 'listbox',\n            'tabindex': 0,\n        });\n\n        this.dropdownWrapper.appendChild(dropdown);\n        return dropdown;\n    };\n\n    /**\n     * Attaches event listeners for input interactions.\n     */\n    attachInputEvents = () => {\n        this.input.addEventListener('focus', () => this.onFocus());\n        this.input.addEventListener('input', () => this.onInput());\n        this.input.addEventListener('keydown', (e) => this.onKeyDown(e));\n        this.input.addEventListener('blur', () => this.onBlurInput());\n        this.dropdown.addEventListener('click', (e) => this.onDropdownItemClick(e));\n        document.addEventListener('click', (e) => this.onDocumentClick(e));\n        window.addEventListener('resize', () => this.updateDropdownPosition());\n    };\n\n    /**\n     * Handles input focus event.\n     */\n    onFocus = () => {\n        this.filterData();\n        this.updateDropdownPosition();\n        this.showDropdown();\n    };\n\n    /**\n     * Handles input event to filter data.\n     */\n    onInput = () => {\n        // Data for filter got by the latest portion after the last comma.\n        this.filterData(this.getLastInputPortion());\n        this.updateDropdownPosition();\n        this.showDropdown();\n    };\n\n    /**\n     * Handles keydown event for keyboard navigation.\n     *\n     * @param {KeyboardEvent} event - The keydown event\n     */\n    onKeyDown = (event) => {\n        const items = this.dropdown.querySelectorAll('.autocomplete-item');\n        if (items.length === 0) {\n            return;\n        }\n        switch (event.key) {\n            case 'ArrowDown': this.navigateDown(items); break;\n            case 'ArrowUp': this.navigateUp(items); break;\n            case 'Escape': this.hideDropdown(); break;\n            case 'Enter':\n                event.preventDefault();\n                this.selectItem(items); break;\n            default: break;\n        }\n    };\n\n    /**\n     * Navigates down the dropdown items.\n     *\n     * @param {NodeList} items - The list of dropdown items\n     */\n    navigateDown = (items) => {\n        this.activeIndex = (this.activeIndex + 1) % items.length;\n        this.setActiveItem(this.activeIndex);\n    };\n\n    /**\n     * Navigates up the dropdown items.\n     *\n     * @param {NodeList} items - The list of dropdown items\n     */\n    navigateUp = (items) => {\n        this.activeIndex = (this.activeIndex - 1 + items.length) % items.length;\n        this.setActiveItem(this.activeIndex);\n    };\n\n    /**\n     * Selects the currently active item in the dropdown.\n     *\n     * @param {NodeList} items - The list of dropdown items\n     */\n    selectItem = (items) => {\n        if (this.activeIndex >= 0) {\n            this.insertItem({ target: items[this.activeIndex] });\n        }\n    };\n\n    /**\n     * Handles dropdown item click event.\n     *\n     * @param {Event} event - The click event\n     */\n    onDropdownItemClick = (event) => {\n        this.insertItem(event);\n    };\n\n    /**\n     * Closes the dropdown when blur input element.\n     */\n    onBlurInput = () => {\n        setTimeout(() => {\n            const isInput = this.input === document.activeElement;\n            const isDropdown = this.dropdownWrapper.contains(document.activeElement);\n            if (!isInput && !isDropdown) {\n                this.hideDropdown();\n            }\n        }, 100);\n    };\n\n    /**\n     * Closes the dropdown when clicking outside.\n     *\n     * @param {Event} e - The click event\n     */\n    onDocumentClick = (e) => {\n        if (!this.input.contains(e.target) && !e.target.closest('.autocomplete-item')) {\n            this.hideDropdown();\n        }\n    };\n\n    /**\n     * Shows the dropdown element.\n     */\n    showDropdown = () => {\n        this.dropdownWrapper.style.display = 'block';\n        this.setAttributes(this.input, {\n            'aria-expanded': 'true',\n        });\n    };\n\n    /**\n     * Hides the dropdown element.\n     */\n    hideDropdown = () => {\n        this.dropdownWrapper.style.display = 'none';\n        this.setAttributes(this.input, {\n            'aria-expanded': 'false',\n            'aria-activedescendant': '',\n        });\n        this.activeIndex = -1;\n    };\n\n    /**\n     * Highlights the portion of the suggestion that matches the user's query by wrapping the matching\n     * characters in a <strong> tag to apply bold formatting in the HTML output.\n     *\n     * @param {string} suggestion - The full suggestion text from the list of possible autocomplete options\n     * @returns {string} - The suggestion string with the matching query portion wrapped in <strong> tags. If no match is found,\n     *                     the original suggestion is returned without modification\n     */\n    highlightMatch = (suggestion) => {\n        let query = this.getLastInputPortion();\n        const startIdx = suggestion.toLowerCase().indexOf(query.toLowerCase());\n        const endIdx = startIdx + query.length;\n        return suggestion.slice(0, startIdx) +\n            '<strong>' + suggestion.slice(startIdx, endIdx) + '</strong>' +\n            suggestion.slice(endIdx);\n    };\n\n    /**\n     * Filters the data based on the current input value.\n     *\n     * @param {string} query - The query string typed by the user that will be matched in the suggestion\n     */\n    filterData = (query= '') => {\n        let existingValues = this.cleanInputValue().split(',').map(value => value.trim()).filter(value => value !== '');\n        this.filteredData = this.data.filter(item => item.tag.toLowerCase().includes(query.toLowerCase())\n            && !existingValues.includes(item.tag));\n        this.renderDropdown();\n    };\n\n    /**\n     * Cleans up the input value for filtering.\n     *\n     * @returns {string} - The cleaned input value\n     */\n    cleanInputValue = () => {\n        let value = this.input.value.trim();\n        if (value.endsWith(',')) {\n            value = value.slice(0, -1).trim();\n        }\n        return value;\n    };\n\n    /**\n     * Retrieves the latest portion of text from the input value after the last comma.\n     *\n     * @returns {string} - The portion of text after the last comma, trimmed of extra spaces\n     */\n     getLastInputPortion = () => {\n        return this.input.value.trim().split(',').pop().trim();\n    };\n\n    /**\n     * Renders the filtered data in the dropdown.\n     */\n    renderDropdown = () => {\n        this.dropdown.innerHTML = '';\n        this.filteredData.forEach(item => {\n            const li = document.createElement('li');\n            li.className = 'autocomplete-item';\n            this.setAttributes(li, {\n                'role': 'option',\n                'tabindex': -1,\n                'id': `autocomplete-item-${item.id}`,\n                'aria-selected': 'false',\n            });\n\n            const resultDiv = document.createElement('div');\n            resultDiv.className = 'autocomplete_result';\n            const titleSpan = document.createElement('span');\n            titleSpan.className = 'autocomplete_result_title';\n            titleSpan.innerHTML = this.highlightMatch(item.tag);\n            resultDiv.appendChild(titleSpan);\n\n            const countSpan = document.createElement('span');\n            countSpan.className = 'autocomplete_result_info';\n            getString('numposts', 'oublog', item.count).then((numpost) => {\n                countSpan.textContent = numpost;\n            });\n            resultDiv.appendChild(countSpan);\n\n            li.appendChild(resultDiv);\n            this.dropdown.appendChild(li);\n        });\n    };\n\n    /**\n     * Sets the active (highlighted) item in the dropdown.\n     *\n     * @param {number} index - The index of the active item\n     */\n    setActiveItem = (index)  => {\n        const items = this.dropdown.querySelectorAll('.autocomplete-item');\n        items.forEach((item, i) => {\n            const isActive = i === index;\n            this.setAttributes(item, {\n                'aria-selected': isActive ? 'true' : 'false',\n            });\n            item.classList.toggle('active', isActive);\n            if (isActive) {\n                this.setAttributes(this.input, {\n                    'aria-activedescendant': item.id,\n                });\n            }\n        });\n    };\n\n    /**\n     * Inserts the selected item into the input field.\n     *\n     * @param {Event} event - The event that triggered the insertion\n     */\n    insertItem = (event) => {\n        const selectedItemTag = event.target.closest('.autocomplete-item').querySelector('.autocomplete_result_title').textContent;\n        if (!selectedItemTag) {\n            return;\n        }\n\n        let currentValue = this.input.value.trim();\n        let inputValueParts = currentValue.split(',').map(item => item.trim());\n        inputValueParts[inputValueParts.length - 1] = selectedItemTag;\n\n        this.input.value = inputValueParts.join(', ') + ', ';\n        this.input.focus();\n        this.filterData();\n        this.activeIndex = -1;\n    };\n\n    /**\n     * Updates the dropdown position relative to the input field.\n     */\n    updateDropdownPosition = () => {\n        const rect = this.input.getBoundingClientRect();\n        const scrollTop = document.documentElement.scrollTop;\n\n        this.dropdownWrapper.style.position = 'absolute';\n        this.dropdownWrapper.style.top = `${rect.bottom + scrollTop}px`;\n        this.dropdownWrapper.style.left = `${rect.left}px`;\n        this.dropdownWrapper.style.width = `${rect.width}px`;\n    };\n\n    /**\n     * Set attributes to element.\n     *\n     * @param {HTMLElement} el\n     * @param {Object} object\n     */\n    setAttributes = (el, object) => {\n        for (let key in object) {\n            el.setAttribute(key, object[key]);\n        }\n    };\n\n}\n\n/**\n * Initializes an TagSelector instance for a given input element.\n *\n * @param {String} inputID - The ID of the input element where the TagSelector will be attached\n * @param {Object|Array} data - An array of data items to be used for the TagSelector suggestions\n * @returns {TagSelector} - An instance of the TagSelector class initialized with the given input element and data\n */\nexport const init = (inputID, data) => {\n    // Ensure data is converted to an array if it's an object.\n    const dataArray = Array.isArray(data) ? data : Object.values(data);\n    return new TagSelector(inputID, dataArray);\n};\n"],"names":["TagSelector","constructor","inputId","data","wrapper","document","createElement","className","body","appendChild","dropdown","setAttributes","this","input","id","dropdownWrapper","addEventListener","onFocus","onInput","e","onKeyDown","onBlurInput","onDropdownItemClick","onDocumentClick","window","updateDropdownPosition","filterData","showDropdown","getLastInputPortion","event","items","querySelectorAll","length","key","navigateDown","navigateUp","hideDropdown","preventDefault","selectItem","activeIndex","setActiveItem","insertItem","target","setTimeout","isInput","activeElement","isDropdown","contains","closest","style","display","suggestion","query","startIdx","toLowerCase","indexOf","endIdx","slice","existingValues","_this","cleanInputValue","split","map","value","trim","filter","filteredData","item","tag","includes","renderDropdown","endsWith","pop","innerHTML","forEach","li","resultDiv","titleSpan","highlightMatch","countSpan","count","then","numpost","textContent","index","i","isActive","classList","toggle","selectedItemTag","querySelector","inputValueParts","join","focus","rect","getBoundingClientRect","scrollTop","documentElement","position","top","bottom","left","width","el","object","setAttribute","getElementById","createDropdownWrapper","createDropdown","attachInputEvents","inputID","dataArray","Array","isArray","Object","values"],"mappings":"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"}